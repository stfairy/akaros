#!/bin/ash

MAC=`cat '#ether/ether0/addr'`

#bind -a '#ip' /net
#bind -a '#ether.0' /net
#cat /net/ipifc/clone
## bind the ether0 to it
#echo 'bind ether /net/ether0' > /net/ipifc/0/ctl
#exit

# ifconfig it

export cputype=amd64
export objtype=$cputype
export service=cpu
export authid=bootes
export rootdir=/root
export rootspec=''
export rootsrv=boot

NIC="0"
#authentication='nvram=/boot/adm/nvram auth/factotum -sfactotum -S'      # -a ...
# test xyzip=(0 0 0 104.9.33)
# test fsaddr='tcp!135.$xyzip(4)^!564'
# (me network server server-addr
# wrong addresses.

if [ -f '/etc/network/default' ]
then
	source /etc/network/default
else
	echo '/etc/network/default not found'
fi

if [ -f '/etc/network/local' ]
then
	source /etc/network/local
else
	echo '/etc/network/local not found'
fi

if [ -d '/etc/network/local.d' ]
then
	for cfg in /etc/network/local.d/*
	do
		source $cfg
	done
else
	echo '/etc/network/local.d not found'
fi

#
# Post the read-only filesystem in #s/$beetroot
# and mount it on /boot so the commands in /boot/$cputype/bin
# are available to create the namespace (namespaces like to
# mount #s/boot on / and that should not be the read-only
# filesystem).
# Must set hostowner to be that of the owner of the nvram file
# before paqfs starts otherwise factotum will not be able to
# open it.
#
#/boot/echo -n sys > '#c/hostowner'
#/boot/paqfs -p -S $beetroot -m /boot -q /boot/$beetroot
#cd /boot/$cputype/bin
bind -b '#cons' /dev
#bind '#d' /fd
#bind -c '#e' /env
bind -b '#proc' /proc
#bind -b -c '#srv' /srv
bind -b '#srv' /srv

#
# Configure the networks.
#
bind -a '#ip' /net
bind -a \#ether.$NIC /net

# note: dhcp is possible, just not done yet.
#get an instance of a network stack
i=`cat /net/ipifc/clone`
# bind the ether0 to it
# the kernel sets errno, though it doesn't return -1 or anything.  but our bb
# hacks doesn't know any better, and echo will think it was an error
echo "bind ether /net/ether$NIC " > /net/ipifc/$i/ctl 2> /dev/null
# ifconfig it
echo "add $me $mask $remote" > /net/ipifc/$i/ctl
echo "add 0 0 $route" > /net/iproute
echo I am $me, default route $route

i=`cat /net/ipifc/clone`
echo "bind loopback /dev/null " > /net/ipifc/$i/ctl
echo "add 127.0.0.1 255.0.0.0 127.0.0.0 " > /net/ipifc/$i/ctl

cs&
if [ ! -e "#srv/cs" ]
then
	echo "cs hasn't created #srv/cs yet, sleeping until it does..."
	until [ -e "#srv/cs" ]
	do
		usleep 1000
	done
fi
mount -a \#srv/cs /net

# this is noisy, so it is off by default.
#echo debug > /net/cs

bind -a \#kprof /prof/

echo "ifconfig complete"
